"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "https://localhost/esa";
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 * DefaultApi - fetch parameter creator
 */
exports.DefaultApiFetchParamCreactor = {
    /**
     * Create new user generated content
     * Save user generated content.
     * @param body Generated content object
     */
    createUGC: function (params) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling createUGC");
        }
        var baseUrl = "/ugc/ugc";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get user generated content by resource ID
     * Method returns the user generated content by resource id.
     * @param resourceId Resource ID
     */
    findUGC: function (params) {
        var baseUrl = "/ugc/ugc";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "resourceId": params.resourceId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get types of user generated content.
     * Method returns types of user generated content.
     */
    getContentTypes: function () {
        var baseUrl = "/ugc/type/ugc";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get location types of user generated content.
     * Method returns location types of user generated content.
     */
    getLocationTypes: function () {
        var baseUrl = "/ugc/type/location";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get user generated content by UGC ID
     * Method returns the user generated content by UGC id.
     * @param ugcId UGC ID
     */
    getUGC: function (params) {
        // verify required parameter "ugcId" is set
        if (params["ugcId"] == null) {
            throw new Error("Missing required parameter ugcId when calling getUGC");
        }
        var baseUrl = "/ugc/ugc/{ugcId}"
            .replace("{" + "ugcId" + "}", "" + params.ugcId);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Remove user generated content
     * Remove user generated content by UGC ID.
     * @param ugcId UGC ID
     */
    removeUGC: function (params) {
        // verify required parameter "ugcId" is set
        if (params["ugcId"] == null) {
            throw new Error("Missing required parameter ugcId when calling removeUGC");
        }
        var baseUrl = "/ugc/ugc/{ugcId}"
            .replace("{" + "ugcId" + "}", "" + params.ugcId);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Update user generated content
     * Update user generated content by UGC ID.
     * @param ugcId UGC ID
     * @param body Generated content object
     */
    updateUGC: function (params) {
        // verify required parameter "ugcId" is set
        if (params["ugcId"] == null) {
            throw new Error("Missing required parameter ugcId when calling updateUGC");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling updateUGC");
        }
        var baseUrl = "/ugc/ugc/{ugcId}"
            .replace("{" + "ugcId" + "}", "" + params.ugcId);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DefaultApi - functional programming interface
 */
exports.DefaultApiFp = {
    /**
     * Create new user generated content
     * Save user generated content.
     * @param body Generated content object
     */
    createUGC: function (params) {
        var fetchArgs = exports.DefaultApiFetchParamCreactor.createUGC(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get user generated content by resource ID
     * Method returns the user generated content by resource id.
     * @param resourceId Resource ID
     */
    findUGC: function (params) {
        var fetchArgs = exports.DefaultApiFetchParamCreactor.findUGC(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get types of user generated content.
     * Method returns types of user generated content.
     */
    getContentTypes: function () {
        var fetchArgs = exports.DefaultApiFetchParamCreactor.getContentTypes();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get location types of user generated content.
     * Method returns location types of user generated content.
     */
    getLocationTypes: function () {
        var fetchArgs = exports.DefaultApiFetchParamCreactor.getLocationTypes();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get user generated content by UGC ID
     * Method returns the user generated content by UGC id.
     * @param ugcId UGC ID
     */
    getUGC: function (params) {
        var fetchArgs = exports.DefaultApiFetchParamCreactor.getUGC(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Remove user generated content
     * Remove user generated content by UGC ID.
     * @param ugcId UGC ID
     */
    removeUGC: function (params) {
        var fetchArgs = exports.DefaultApiFetchParamCreactor.removeUGC(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Update user generated content
     * Update user generated content by UGC ID.
     * @param ugcId UGC ID
     * @param body Generated content object
     */
    updateUGC: function (params) {
        var fetchArgs = exports.DefaultApiFetchParamCreactor.updateUGC(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DefaultApi - object-oriented interface
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        _super.apply(this, arguments);
    }
    /**
     * Create new user generated content
     * Save user generated content.
     * @param body Generated content object
     */
    DefaultApi.prototype.createUGC = function (params) {
        return exports.DefaultApiFp.createUGC(params)(this.fetch, this.basePath);
    };
    /**
     * Get user generated content by resource ID
     * Method returns the user generated content by resource id.
     * @param resourceId Resource ID
     */
    DefaultApi.prototype.findUGC = function (params) {
        return exports.DefaultApiFp.findUGC(params)(this.fetch, this.basePath);
    };
    /**
     * Get types of user generated content.
     * Method returns types of user generated content.
     */
    DefaultApi.prototype.getContentTypes = function () {
        return exports.DefaultApiFp.getContentTypes()(this.fetch, this.basePath);
    };
    /**
     * Get location types of user generated content.
     * Method returns location types of user generated content.
     */
    DefaultApi.prototype.getLocationTypes = function () {
        return exports.DefaultApiFp.getLocationTypes()(this.fetch, this.basePath);
    };
    /**
     * Get user generated content by UGC ID
     * Method returns the user generated content by UGC id.
     * @param ugcId UGC ID
     */
    DefaultApi.prototype.getUGC = function (params) {
        return exports.DefaultApiFp.getUGC(params)(this.fetch, this.basePath);
    };
    /**
     * Remove user generated content
     * Remove user generated content by UGC ID.
     * @param ugcId UGC ID
     */
    DefaultApi.prototype.removeUGC = function (params) {
        return exports.DefaultApiFp.removeUGC(params)(this.fetch, this.basePath);
    };
    /**
     * Update user generated content
     * Update user generated content by UGC ID.
     * @param ugcId UGC ID
     * @param body Generated content object
     */
    DefaultApi.prototype.updateUGC = function (params) {
        return exports.DefaultApiFp.updateUGC(params)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
